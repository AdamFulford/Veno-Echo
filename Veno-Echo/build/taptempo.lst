ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"taptempo.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN8Taptempo4initEmmfi,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	_ZN8Taptempo4initEmmfi
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN8Taptempo4initEmmfi:
  27              	.LVL0:
  28              	.LFB4373:
  29              		.file 1 "taptempo.cpp"
   1:taptempo.cpp  **** // Copyright 2021 Adam Fulford
   2:taptempo.cpp  **** // 
   3:taptempo.cpp  **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   4:taptempo.cpp  **** // of this software and associated documentation files (the "Software"), to deal
   5:taptempo.cpp  **** // in the Software without restriction, including without limitation the rights
   6:taptempo.cpp  **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   7:taptempo.cpp  **** // copies of the Software, and to permit persons to whom the Software is
   8:taptempo.cpp  **** // furnished to do so, subject to the following conditions:
   9:taptempo.cpp  **** // 
  10:taptempo.cpp  **** // The above copyright notice and this permission notice shall be included in
  11:taptempo.cpp  **** // all copies or substantial portions of the Software.
  12:taptempo.cpp  **** // 
  13:taptempo.cpp  **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  14:taptempo.cpp  **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  15:taptempo.cpp  **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  16:taptempo.cpp  **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  17:taptempo.cpp  **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  18:taptempo.cpp  **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  19:taptempo.cpp  **** // THE SOFTWARE.
  20:taptempo.cpp  **** // 
  21:taptempo.cpp  **** // See http://creativecommons.org/licenses/MIT/ for more information.
  22:taptempo.cpp  **** 
  23:taptempo.cpp  **** #include "taptempo.h"
  24:taptempo.cpp  **** 
  25:taptempo.cpp  ****     //set mintap (samples), maxtap (samples), tap tolerance
  26:taptempo.cpp  ****     void Taptempo::init(uint32_t mintap, uint32_t maxtap, float tap_tolerance, int PPQN)
  27:taptempo.cpp  ****     {
  30              		.loc 1 27 5 view -0
  31              		.cfi_startproc
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 2


  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  28:taptempo.cpp  ****         mintap_ = mintap;
  35              		.loc 1 28 9 view .LVU1
  27:taptempo.cpp  ****         mintap_ = mintap;
  36              		.loc 1 27 5 is_stmt 0 view .LVU2
  37 0000 70B4     		push	{r4, r5, r6}
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 6, -4
  29:taptempo.cpp  ****         maxtap_ = maxtap;
  30:taptempo.cpp  ****         tap_tolerance_ = tap_tolerance;
  31:taptempo.cpp  ****         tapLength_ = 0;
  32:taptempo.cpp  ****         lastTapLength_ = 0;
  33:taptempo.cpp  ****         tempo_ = 500000.0f; //in Us. Default 120BPM
  34:taptempo.cpp  ****         lastTime_ = 0;
  35:taptempo.cpp  ****         currentTime_ = 0;
  36:taptempo.cpp  ****         tapflag_ = false;
  37:taptempo.cpp  ****         tapRatio_ = 1.0;
  38:taptempo.cpp  ****         PPQN_ = PPQN;
  39:taptempo.cpp  ****         minclock_ = 960/PPQN_;  //in samples
  42              		.loc 1 39 24 view .LVU3
  43 0002 4FF47075 		mov	r5, #960
  40:taptempo.cpp  ****         maxclock_ = 288000/PPQN_; //in samples
  44              		.loc 1 40 27 view .LVU4
  45 0006 0D4C     		ldr	r4, .L4
  37:taptempo.cpp  ****         PPQN_ = PPQN;
  46              		.loc 1 37 19 view .LVU5
  47 0008 4FF07E56 		mov	r6, #1065353216
  38:taptempo.cpp  ****         minclock_ = 960/PPQN_;  //in samples
  48              		.loc 1 38 15 view .LVU6
  49 000c 4364     		str	r3, [r0, #68]
  30:taptempo.cpp  ****         tapLength_ = 0;
  50              		.loc 1 30 24 view .LVU7
  51 000e 80ED0E0A 		vstr.32	s0, [r0, #56]
  37:taptempo.cpp  ****         PPQN_ = PPQN;
  52              		.loc 1 37 19 view .LVU8
  53 0012 0664     		str	r6, [r0, #64]	@ float
  39:taptempo.cpp  ****         maxclock_ = 288000/PPQN_; //in samples
  54              		.loc 1 39 24 view .LVU9
  55 0014 95FBF3F5 		sdiv	r5, r5, r3
  56              		.loc 1 40 27 view .LVU10
  57 0018 94FBF3F4 		sdiv	r4, r4, r3
  29:taptempo.cpp  ****         tap_tolerance_ = tap_tolerance;
  58              		.loc 1 29 17 view .LVU11
  59 001c C0E90012 		strd	r1, r2, [r0]
  30:taptempo.cpp  ****         tapLength_ = 0;
  60              		.loc 1 30 9 is_stmt 1 view .LVU12
  31:taptempo.cpp  ****         lastTapLength_ = 0;
  61              		.loc 1 31 9 view .LVU13
  31:taptempo.cpp  ****         lastTapLength_ = 0;
  62              		.loc 1 31 20 is_stmt 0 view .LVU14
  63 0020 0023     		movs	r3, #0
  64              	.LVL1:
  33:taptempo.cpp  ****         lastTime_ = 0;
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 3


  65              		.loc 1 33 16 view .LVU15
  66 0022 074A     		ldr	r2, .L4+4
  67              	.LVL2:
  68              		.loc 1 40 19 view .LVU16
  69 0024 C0E90254 		strd	r5, r4, [r0, #8]
  33:taptempo.cpp  ****         lastTime_ = 0;
  70              		.loc 1 33 16 view .LVU17
  71 0028 C263     		str	r2, [r0, #60]	@ float
  36:taptempo.cpp  ****         tapRatio_ = 1.0;
  72              		.loc 1 36 18 view .LVU18
  73 002a 80F83430 		strb	r3, [r0, #52]
  41:taptempo.cpp  **** 
  42:taptempo.cpp  ****         //dsy_tim_init(); //start timer
  43:taptempo.cpp  ****         //dsy_tim_start();
  44:taptempo.cpp  ****     }
  74              		.loc 1 44 5 view .LVU19
  75 002e 70BC     		pop	{r4, r5, r6}
  76              		.cfi_restore 6
  77              		.cfi_restore 5
  78              		.cfi_restore 4
  79              		.cfi_def_cfa_offset 0
  32:taptempo.cpp  ****         tempo_ = 500000.0f; //in Us. Default 120BPM
  80              		.loc 1 32 24 view .LVU20
  81 0030 C0E90633 		strd	r3, r3, [r0, #24]
  33:taptempo.cpp  ****         lastTime_ = 0;
  82              		.loc 1 33 9 is_stmt 1 view .LVU21
  34:taptempo.cpp  ****         currentTime_ = 0;
  83              		.loc 1 34 9 view .LVU22
  35:taptempo.cpp  ****         tapflag_ = false;
  84              		.loc 1 35 22 is_stmt 0 view .LVU23
  85 0034 C0E90433 		strd	r3, r3, [r0, #16]
  36:taptempo.cpp  ****         tapRatio_ = 1.0;
  86              		.loc 1 36 9 is_stmt 1 view .LVU24
  37:taptempo.cpp  ****         PPQN_ = PPQN;
  87              		.loc 1 37 9 view .LVU25
  38:taptempo.cpp  ****         minclock_ = 960/PPQN_;  //in samples
  88              		.loc 1 38 9 view .LVU26
  39:taptempo.cpp  ****         maxclock_ = 288000/PPQN_; //in samples
  89              		.loc 1 39 9 view .LVU27
  40:taptempo.cpp  **** 
  90              		.loc 1 40 9 view .LVU28
  91              		.loc 1 44 5 is_stmt 0 view .LVU29
  92 0038 7047     		bx	lr
  93              	.L5:
  94 003a 00BF     		.align	2
  95              	.L4:
  96 003c 00650400 		.word	288000
  97 0040 0024F448 		.word	1223959552
  98              		.cfi_endproc
  99              	.LFE4373:
 101              		.section	.text._ZN8Taptempo3tapEv,"ax",%progbits
 102              		.align	1
 103              		.p2align 2,,3
 104              		.global	_ZN8Taptempo3tapEv
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 4


 108              		.fpu fpv5-d16
 110              	_ZN8Taptempo3tapEv:
 111              	.LVL3:
 112              	.LFB4374:
  45:taptempo.cpp  ****     
  46:taptempo.cpp  ****     //call when tap is triggered. currentTime in ms. Returns high if tempo updated
  47:taptempo.cpp  ****     bool Taptempo::tap()
  48:taptempo.cpp  ****     {
 113              		.loc 1 48 5 is_stmt 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
  49:taptempo.cpp  ****         currentTime_ = System::GetUs();    //get current time
 117              		.loc 1 49 9 view .LVU31
  48:taptempo.cpp  ****         currentTime_ = System::GetUs();    //get current time
 118              		.loc 1 48 5 is_stmt 0 view .LVU32
 119 0000 10B5     		push	{r4, lr}
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 4, -8
 122              		.cfi_offset 14, -4
  48:taptempo.cpp  ****         currentTime_ = System::GetUs();    //get current time
 123              		.loc 1 48 5 view .LVU33
 124 0002 0446     		mov	r4, r0
 125              		.loc 1 49 37 view .LVU34
 126 0004 FFF7FEFF 		bl	_ZN5daisy6System5GetUsEv
 127              	.LVL4:
  50:taptempo.cpp  ****         tapLength_ = currentTime_ - lastTime_;  //calculate length between taps
 128              		.loc 1 50 35 view .LVU35
 129 0008 6369     		ldr	r3, [r4, #20]
  51:taptempo.cpp  ****         lastTime_ = currentTime_;   //always update lastTime_
  52:taptempo.cpp  ****         
  53:taptempo.cpp  ****         if(mintap_ <= tapLength_ && tapLength_ <= maxtap_)  //if between limits
 130              		.loc 1 53 9 view .LVU36
 131 000a 2268     		ldr	r2, [r4]
  50:taptempo.cpp  ****         tapLength_ = currentTime_ - lastTime_;  //calculate length between taps
 132              		.loc 1 50 35 view .LVU37
 133 000c C31A     		subs	r3, r0, r3
 134              		.loc 1 53 9 view .LVU38
 135 000e 9342     		cmp	r3, r2
  50:taptempo.cpp  ****         tapLength_ = currentTime_ - lastTime_;  //calculate length between taps
 136              		.loc 1 50 20 view .LVU39
 137 0010 E361     		str	r3, [r4, #28]
  51:taptempo.cpp  ****         lastTime_ = currentTime_;   //always update lastTime_
 138              		.loc 1 51 9 is_stmt 1 view .LVU40
 139              		.loc 1 53 9 view .LVU41
 140              		.loc 1 53 34 is_stmt 0 view .LVU42
 141 0012 6268     		ldr	r2, [r4, #4]
  51:taptempo.cpp  ****         lastTime_ = currentTime_;   //always update lastTime_
 142              		.loc 1 51 19 view .LVU43
 143 0014 C4E90400 		strd	r0, r0, [r4, #16]
 144              		.loc 1 53 9 view .LVU44
 145 0018 22D3     		bcc	.L7
 146              		.loc 1 53 34 discriminator 1 view .LVU45
 147 001a 9342     		cmp	r3, r2
 148 001c 24D8     		bhi	.L8
  54:taptempo.cpp  ****         {
  55:taptempo.cpp  ****             if(tapflag_)
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 5


 149              		.loc 1 55 13 is_stmt 1 view .LVU46
 150              		.loc 1 55 16 is_stmt 0 view .LVU47
 151 001e 94F83400 		ldrb	r0, [r4, #52]	@ zero_extendqisi2
  56:taptempo.cpp  ****             {
  57:taptempo.cpp  ****                 tapflag_ = false;   //reset tapflag
  58:taptempo.cpp  ****                 tempo_ = static_cast<float>(tapLength_) / tapRatio_ * 0.048f;
 152              		.loc 1 58 26 view .LVU48
 153 0022 07EE903A 		vmov	s15, r3	@ int
  55:taptempo.cpp  ****             {
 154              		.loc 1 55 13 view .LVU49
 155 0026 20BB     		cbnz	r0, .L15
  59:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
  60:taptempo.cpp  ****                 return true;
  61:taptempo.cpp  ****             }
  62:taptempo.cpp  **** 
  63:taptempo.cpp  ****             else    //tapflag_ not set
  64:taptempo.cpp  ****             {
  65:taptempo.cpp  ****                 if(static_cast<float>(tapLength_) >= tap_tolerance_ * static_cast<float>(lastTapLen
 156              		.loc 1 65 17 is_stmt 1 view .LVU50
 157              		.loc 1 65 20 is_stmt 0 view .LVU51
 158 0028 B8EE677A 		vcvt.f32.u32	s14, s15
 159              		.loc 1 65 71 view .LVU52
 160 002c D4ED067A 		vldr.32	s15, [r4, #24]	@ int
 161              		.loc 1 65 69 view .LVU53
 162 0030 D4ED0E6A 		vldr.32	s13, [r4, #56]
 163              		.loc 1 65 71 view .LVU54
 164 0034 F8EE677A 		vcvt.f32.u32	s15, s15
 165              		.loc 1 65 69 view .LVU55
 166 0038 67EEA67A 		vmul.f32	s15, s15, s13
 167              		.loc 1 65 17 view .LVU56
 168 003c B4EEE77A 		vcmpe.f32	s14, s15
 169 0040 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 170 0044 10DA     		bge	.L8
  66:taptempo.cpp  ****                 {
  67:taptempo.cpp  ****                     tapflag_ = true;
  68:taptempo.cpp  ****                     return false;
  69:taptempo.cpp  ****                 }
  70:taptempo.cpp  ****                 else
  71:taptempo.cpp  ****                 {
  72:taptempo.cpp  ****                     tempo_ = static_cast<float>(tapLength_) / tapRatio_ * 0.048f;
 171              		.loc 1 72 21 is_stmt 1 view .LVU57
 172              		.loc 1 72 61 is_stmt 0 view .LVU58
 173 0046 94ED106A 		vldr.32	s12, [r4, #64]
  73:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
  74:taptempo.cpp  ****                     return true;
 174              		.loc 1 74 28 view .LVU59
 175 004a 0120     		movs	r0, #1
  72:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
 176              		.loc 1 72 73 view .LVU60
 177 004c DFED116A 		vldr.32	s13, .L16
  72:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
 178              		.loc 1 72 61 view .LVU61
 179 0050 C7EE067A 		vdiv.f32	s15, s14, s12
  73:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
 180              		.loc 1 73 36 view .LVU62
 181 0054 A361     		str	r3, [r4, #24]
  72:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 6


 182              		.loc 1 72 73 view .LVU63
 183 0056 67EEA67A 		vmul.f32	s15, s15, s13
  72:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
 184              		.loc 1 72 28 view .LVU64
 185 005a C4ED0F7A 		vstr.32	s15, [r4, #60]
  73:taptempo.cpp  ****                     lastTapLength_ = tapLength_;
 186              		.loc 1 73 21 is_stmt 1 view .LVU65
 187              		.loc 1 74 21 view .LVU66
  75:taptempo.cpp  ****                 }
  76:taptempo.cpp  ****             }
  77:taptempo.cpp  ****         }
  78:taptempo.cpp  ****         //if tap length too long then set tap_flag (to say this is first tap) and reset LFO
  79:taptempo.cpp  ****         else if(tapLength_ > maxtap_)
  80:taptempo.cpp  ****         {
  81:taptempo.cpp  ****             tapflag_ = true;
  82:taptempo.cpp  ****             return false;
  83:taptempo.cpp  ****         }
  84:taptempo.cpp  ****         //if tap time too short do nothing
  85:taptempo.cpp  ****         else if(tapLength_ < mintap_)
  86:taptempo.cpp  ****         {
  87:taptempo.cpp  ****             return false;
  88:taptempo.cpp  ****         }
  89:taptempo.cpp  **** 
  90:taptempo.cpp  ****         else
  91:taptempo.cpp  ****         {
  92:taptempo.cpp  ****             return false;
  93:taptempo.cpp  ****         }
  94:taptempo.cpp  **** 
  95:taptempo.cpp  ****     }
 188              		.loc 1 95 5 is_stmt 0 view .LVU67
 189 005e 10BD     		pop	{r4, pc}
 190              	.LVL5:
 191              	.L7:
  79:taptempo.cpp  ****         {
 192              		.loc 1 79 14 is_stmt 1 view .LVU68
 193 0060 9342     		cmp	r3, r2
 194 0062 01D8     		bhi	.L8
  87:taptempo.cpp  ****         }
 195              		.loc 1 87 20 is_stmt 0 view .LVU69
 196 0064 0020     		movs	r0, #0
 197              		.loc 1 95 5 view .LVU70
 198 0066 10BD     		pop	{r4, pc}
 199              	.LVL6:
 200              	.L8:
  67:taptempo.cpp  ****                     return false;
 201              		.loc 1 67 21 is_stmt 1 view .LVU71
  67:taptempo.cpp  ****                     return false;
 202              		.loc 1 67 30 is_stmt 0 view .LVU72
 203 0068 0123     		movs	r3, #1
  68:taptempo.cpp  ****                 }
 204              		.loc 1 68 28 view .LVU73
 205 006a 0020     		movs	r0, #0
  67:taptempo.cpp  ****                     return false;
 206              		.loc 1 67 30 view .LVU74
 207 006c 84F83430 		strb	r3, [r4, #52]
  68:taptempo.cpp  ****                 }
 208              		.loc 1 68 21 is_stmt 1 view .LVU75
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 7


 209              		.loc 1 95 5 is_stmt 0 view .LVU76
 210 0070 10BD     		pop	{r4, pc}
 211              	.LVL7:
 212              	.L15:
  57:taptempo.cpp  ****                 tempo_ = static_cast<float>(tapLength_) / tapRatio_ * 0.048f;
 213              		.loc 1 57 17 is_stmt 1 view .LVU77
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 214              		.loc 1 58 26 is_stmt 0 view .LVU78
 215 0072 B8EE676A 		vcvt.f32.u32	s12, s15
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 216              		.loc 1 58 57 view .LVU79
 217 0076 D4ED106A 		vldr.32	s13, [r4, #64]
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 218              		.loc 1 58 69 view .LVU80
 219 007a 9FED067A 		vldr.32	s14, .L16
  57:taptempo.cpp  ****                 tempo_ = static_cast<float>(tapLength_) / tapRatio_ * 0.048f;
 220              		.loc 1 57 26 view .LVU81
 221 007e 0022     		movs	r2, #0
  59:taptempo.cpp  ****                 return true;
 222              		.loc 1 59 32 view .LVU82
 223 0080 A361     		str	r3, [r4, #24]
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 224              		.loc 1 58 57 view .LVU83
 225 0082 C6EE267A 		vdiv.f32	s15, s12, s13
  57:taptempo.cpp  ****                 tempo_ = static_cast<float>(tapLength_) / tapRatio_ * 0.048f;
 226              		.loc 1 57 26 view .LVU84
 227 0086 84F83420 		strb	r2, [r4, #52]
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 228              		.loc 1 58 17 is_stmt 1 view .LVU85
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 229              		.loc 1 58 69 is_stmt 0 view .LVU86
 230 008a 67EE877A 		vmul.f32	s15, s15, s14
  58:taptempo.cpp  ****                 lastTapLength_ = tapLength_;
 231              		.loc 1 58 24 view .LVU87
 232 008e C4ED0F7A 		vstr.32	s15, [r4, #60]
  59:taptempo.cpp  ****                 return true;
 233              		.loc 1 59 17 is_stmt 1 view .LVU88
  60:taptempo.cpp  ****             }
 234              		.loc 1 60 17 view .LVU89
 235              		.loc 1 95 5 is_stmt 0 view .LVU90
 236 0092 10BD     		pop	{r4, pc}
 237              	.LVL8:
 238              	.L17:
 239              		.loc 1 95 5 view .LVU91
 240              		.align	2
 241              	.L16:
 242 0094 A69B443D 		.word	1027906470
 243              		.cfi_endproc
 244              	.LFE4374:
 246              		.section	.text._ZN8Taptempo5clockEm,"ax",%progbits
 247              		.align	1
 248              		.p2align 2,,3
 249              		.global	_ZN8Taptempo5clockEm
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv5-d16
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 8


 255              	_ZN8Taptempo5clockEm:
 256              	.LVL9:
 257              	.LFB4375:
  96:taptempo.cpp  **** 
  97:taptempo.cpp  **** bool Taptempo::clock(uint32_t count)
  98:taptempo.cpp  ****     {
 258              		.loc 1 98 5 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
  99:taptempo.cpp  ****         //currentClockTime_ = System::GetUs();    //get current time
 100:taptempo.cpp  ****         //clockLength_ = currentClockTime_ - lastClockTime_;  //calculate length between taps
 101:taptempo.cpp  ****         //lastClockTime_ = currentClockTime_;   //always update lastTime_
 102:taptempo.cpp  ****         uint32_t ClockTempo{count};
 263              		.loc 1 102 9 view .LVU93
 103:taptempo.cpp  ****         //int buffsize{PPQN_};
 104:taptempo.cpp  ****         static uint32_t ClockTempoBuff[24];
 264              		.loc 1 104 9 view .LVU94
 105:taptempo.cpp  ****         static int index{};
 265              		.loc 1 105 9 view .LVU95
 106:taptempo.cpp  ****         //if within tempo limits
 107:taptempo.cpp  ****         if(minclock_ <= ClockTempo && ClockTempo <= maxclock_) 
 266              		.loc 1 107 9 view .LVU96
 267              	.LBB6:
 268 0000 8368     		ldr	r3, [r0, #8]
 269 0002 8B42     		cmp	r3, r1
 270 0004 37D8     		bhi	.L32
 271              		.loc 1 107 36 is_stmt 0 discriminator 1 view .LVU97
 272 0006 C368     		ldr	r3, [r0, #12]
 273 0008 8B42     		cmp	r3, r1
 274              	.LBE6:
  98:taptempo.cpp  ****         //currentClockTime_ = System::GetUs();    //get current time
 275              		.loc 1 98 5 discriminator 1 view .LVU98
 276 000a F0B4     		push	{r4, r5, r6, r7}
 277              		.cfi_def_cfa_offset 16
 278              		.cfi_offset 4, -16
 279              		.cfi_offset 5, -12
 280              		.cfi_offset 6, -8
 281              		.cfi_offset 7, -4
 282 000c 0546     		mov	r5, r0
 283              	.LBB10:
 284              		.loc 1 107 36 discriminator 1 view .LVU99
 285 000e 2FD3     		bcc	.L21
 286              	.LBB7:
 108:taptempo.cpp  ****         {
 109:taptempo.cpp  ****             int buffLength{(PPQN_ == 24) ? 24 : 2};
 287              		.loc 1 109 13 is_stmt 1 view .LVU100
 288              		.loc 1 109 29 is_stmt 0 view .LVU101
 289 0010 466C     		ldr	r6, [r0, #68]
 110:taptempo.cpp  ****             //update clockLength_ with rolling average
 111:taptempo.cpp  ****             index = (index + 1) % (buffLength);
 112:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 113:taptempo.cpp  **** 
 114:taptempo.cpp  ****             uint32_t ClockTempoSum{};
 290              		.loc 1 114 22 view .LVU102
 291 0012 0022     		movs	r2, #0
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 9


 111:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 292              		.loc 1 111 28 view .LVU103
 293 0014 DFF874C0 		ldr	ip, .L33+16
 109:taptempo.cpp  ****             //update clockLength_ with rolling average
 294              		.loc 1 109 42 view .LVU104
 295 0018 182E     		cmp	r6, #24
 112:taptempo.cpp  **** 
 296              		.loc 1 112 35 view .LVU105
 297 001a 184F     		ldr	r7, .L33
 111:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 298              		.loc 1 111 28 view .LVU106
 299 001c DCF80000 		ldr	r0, [ip]
 300              	.LVL10:
 109:taptempo.cpp  ****             //update clockLength_ with rolling average
 301              		.loc 1 109 42 view .LVU107
 302 0020 0CBF     		ite	eq
 303 0022 1824     		moveq	r4, #24
 304 0024 0224     		movne	r4, #2
 305              	.LVL11:
 111:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 306              		.loc 1 111 13 is_stmt 1 view .LVU108
 111:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 307              		.loc 1 111 28 is_stmt 0 view .LVU109
 308 0026 431C     		adds	r3, r0, #1
 111:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 309              		.loc 1 111 33 view .LVU110
 310 0028 93FBF4F0 		sdiv	r0, r3, r4
 311 002c 04FB1030 		mls	r0, r4, r0, r3
 312 0030 3B46     		mov	r3, r7
 313 0032 07EB8404 		add	r4, r7, r4, lsl #2
 314              	.LVL12:
 111:taptempo.cpp  ****             ClockTempoBuff[index] = ClockTempo;
 315              		.loc 1 111 19 view .LVU111
 316 0036 CCF80000 		str	r0, [ip]
 112:taptempo.cpp  **** 
 317              		.loc 1 112 13 is_stmt 1 view .LVU112
 112:taptempo.cpp  **** 
 318              		.loc 1 112 35 is_stmt 0 view .LVU113
 319 003a 47F82010 		str	r1, [r7, r0, lsl #2]
 320              		.loc 1 114 13 is_stmt 1 view .LVU114
 321              	.LVL13:
 115:taptempo.cpp  ****             for(int i=0; i <(buffLength); i += 1)
 322              		.loc 1 115 13 view .LVU115
 323              	.LBB8:
 324              		.loc 1 115 28 view .LVU116
 325              	.L23:
 116:taptempo.cpp  ****             {
 117:taptempo.cpp  ****                 ClockTempoSum += ClockTempoBuff[i];
 326              		.loc 1 117 17 discriminator 2 view .LVU117
 327              		.loc 1 117 50 is_stmt 0 discriminator 2 view .LVU118
 328 003e 53F8041B 		ldr	r1, [r3], #4
 115:taptempo.cpp  ****             for(int i=0; i <(buffLength); i += 1)
 329              		.loc 1 115 28 discriminator 2 view .LVU119
 330 0042 A342     		cmp	r3, r4
 331              		.loc 1 117 31 discriminator 2 view .LVU120
 332 0044 0A44     		add	r2, r2, r1
 333              	.LVL14:
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 10


 115:taptempo.cpp  ****             for(int i=0; i <(buffLength); i += 1)
 334              		.loc 1 115 13 is_stmt 1 discriminator 2 view .LVU121
 115:taptempo.cpp  ****             for(int i=0; i <(buffLength); i += 1)
 335              		.loc 1 115 28 discriminator 2 view .LVU122
 336 0046 FAD1     		bne	.L23
 337              	.LBE8:
 118:taptempo.cpp  ****             }
 119:taptempo.cpp  **** 
 120:taptempo.cpp  ****             if(PPQN_ ==24)
 338              		.loc 1 120 13 view .LVU123
 339 0048 182E     		cmp	r6, #24
 340 004a 09D0     		beq	.L24
 121:taptempo.cpp  ****             {
 122:taptempo.cpp  ****                 ClockTempo = ClockTempoSum;
 123:taptempo.cpp  ****             }
 124:taptempo.cpp  ****             else
 125:taptempo.cpp  ****             {
 126:taptempo.cpp  ****                 ClockTempo = ClockTempoSum / 2;
 341              		.loc 1 126 17 view .LVU124
 342              		.loc 1 126 28 is_stmt 0 view .LVU125
 343 004c 5208     		lsrs	r2, r2, #1
 344              	.LVL15:
 127:taptempo.cpp  ****             }
 128:taptempo.cpp  **** 
 129:taptempo.cpp  ****       
 130:taptempo.cpp  ****             //clock tempo update rate: every pulse if PPQN = 1, or every 12 pulses if PPQN = 24
 131:taptempo.cpp  ****             if(index % ((PPQN_ == 24) ? 12: 1) == 0) 
 345              		.loc 1 131 13 is_stmt 1 view .LVU126
 346              	.L25:
 132:taptempo.cpp  ****             {
 133:taptempo.cpp  ****                 tempo_ = static_cast<float> (ClockTempo);
 347              		.loc 1 133 17 view .LVU127
 348              		.loc 1 133 26 is_stmt 0 view .LVU128
 349 004e 07EE902A 		vmov	s15, r2	@ int
 134:taptempo.cpp  ****                 return true;
 350              		.loc 1 134 24 view .LVU129
 351 0052 0120     		movs	r0, #1
 133:taptempo.cpp  ****                 return true;
 352              		.loc 1 133 26 view .LVU130
 353 0054 F8EE677A 		vcvt.f32.u32	s15, s15
 354 0058 C5ED0F7A 		vstr.32	s15, [r5, #60]
 355              		.loc 1 134 17 is_stmt 1 view .LVU131
 356              	.LBE7:
 357              	.LBE10:
 135:taptempo.cpp  ****             }
 136:taptempo.cpp  ****             else
 137:taptempo.cpp  ****             {
 138:taptempo.cpp  ****                 return false;
 139:taptempo.cpp  ****             }
 140:taptempo.cpp  ****         }
 141:taptempo.cpp  ****         else
 142:taptempo.cpp  ****         {
 143:taptempo.cpp  ****             return false;
 144:taptempo.cpp  ****         }
 145:taptempo.cpp  ****     }
 358              		.loc 1 145 5 is_stmt 0 view .LVU132
 359 005c F0BC     		pop	{r4, r5, r6, r7}
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 11


 360              		.cfi_remember_state
 361              		.cfi_restore 7
 362              		.cfi_restore 6
 363              		.cfi_restore 5
 364              		.cfi_restore 4
 365              		.cfi_def_cfa_offset 0
 366              	.LVL16:
 367              		.loc 1 145 5 view .LVU133
 368 005e 7047     		bx	lr
 369              	.LVL17:
 370              	.L24:
 371              		.cfi_restore_state
 372              	.LBB11:
 373              	.LBB9:
 131:taptempo.cpp  ****             {
 374              		.loc 1 131 13 is_stmt 1 view .LVU134
 375 0060 074C     		ldr	r4, .L33+4
 376 0062 0849     		ldr	r1, .L33+8
 377 0064 084B     		ldr	r3, .L33+12
 378 0066 04FB0010 		mla	r0, r4, r0, r1
 379              	.LVL18:
 131:taptempo.cpp  ****             {
 380              		.loc 1 131 13 is_stmt 0 view .LVU135
 381 006a B3EBB00F 		cmp	r3, r0, ror #2
 382 006e EED2     		bcs	.L25
 383              	.LVL19:
 384              	.L21:
 131:taptempo.cpp  ****             {
 385              		.loc 1 131 13 view .LVU136
 386              	.LBE9:
 143:taptempo.cpp  ****         }
 387              		.loc 1 143 20 view .LVU137
 388 0070 0020     		movs	r0, #0
 389              	.LBE11:
 390              		.loc 1 145 5 view .LVU138
 391 0072 F0BC     		pop	{r4, r5, r6, r7}
 392              		.cfi_restore 7
 393              		.cfi_restore 6
 394              		.cfi_restore 5
 395              		.cfi_restore 4
 396              		.cfi_def_cfa_offset 0
 397              	.LVL20:
 398              		.loc 1 145 5 view .LVU139
 399 0074 7047     		bx	lr
 400              	.LVL21:
 401              	.L32:
 402              	.LBB12:
 143:taptempo.cpp  ****         }
 403              		.loc 1 143 20 view .LVU140
 404 0076 0020     		movs	r0, #0
 405              	.LVL22:
 143:taptempo.cpp  ****         }
 406              		.loc 1 143 20 view .LVU141
 407              	.LBE12:
 408              		.loc 1 145 5 view .LVU142
 409 0078 7047     		bx	lr
 410              	.L34:
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 12


 411 007a 00BF     		.align	2
 412              	.L33:
 413 007c 00000000 		.word	.LANCHOR1
 414 0080 ABAAAAAA 		.word	-1431655765
 415 0084 A8AAAA2A 		.word	715827880
 416 0088 54555515 		.word	357913940
 417 008c 00000000 		.word	.LANCHOR0
 418              		.cfi_endproc
 419              	.LFE4375:
 421              		.section	.text._ZN8Taptempo14getDelayLengthEv,"ax",%progbits
 422              		.align	1
 423              		.p2align 2,,3
 424              		.global	_ZN8Taptempo14getDelayLengthEv
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu fpv5-d16
 430              	_ZN8Taptempo14getDelayLengthEv:
 431              	.LVL23:
 432              	.LFB4376:
 146:taptempo.cpp  ****     
 147:taptempo.cpp  ****     //outputs tap length in Samples
 148:taptempo.cpp  ****     float Taptempo::getDelayLength()
 149:taptempo.cpp  ****     {
 433              		.loc 1 149 5 is_stmt 1 view -0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 150:taptempo.cpp  ****         static float tempo_Out{};
 438              		.loc 1 150 9 view .LVU144
 151:taptempo.cpp  ****         static float tempo_last{};
 439              		.loc 1 151 9 view .LVU145
 152:taptempo.cpp  ****         fonepole(tempo_Out,tempo_,(PPQN_ == 24) ? 0.5f: 0.011f);
 440              		.loc 1 152 9 view .LVU146
 441              	.LBB13:
 442              	.LBB14:
 443              		.file 2 "../DaisySP/Source/Utility/dsp.h"
   1:../DaisySP/Source/Utility/dsp.h **** /** Helpful defines, functions, and other utilities for use in/with daisysp modules.
   2:../DaisySP/Source/Utility/dsp.h **** */
   3:../DaisySP/Source/Utility/dsp.h **** #pragma once
   4:../DaisySP/Source/Utility/dsp.h **** #ifndef DSY_CORE_DSP
   5:../DaisySP/Source/Utility/dsp.h **** #define DSY_CORE_DSP
   6:../DaisySP/Source/Utility/dsp.h **** #include <cassert>
   7:../DaisySP/Source/Utility/dsp.h **** #include <cstdint>
   8:../DaisySP/Source/Utility/dsp.h **** #include <random>
   9:../DaisySP/Source/Utility/dsp.h **** #include <cmath>
  10:../DaisySP/Source/Utility/dsp.h **** 
  11:../DaisySP/Source/Utility/dsp.h **** /** PIs
  12:../DaisySP/Source/Utility/dsp.h **** */
  13:../DaisySP/Source/Utility/dsp.h **** #define PI_F 3.1415927410125732421875f
  14:../DaisySP/Source/Utility/dsp.h **** #define TWOPI_F (2.0f * PI_F)
  15:../DaisySP/Source/Utility/dsp.h **** #define HALFPI_F (PI_F * 0.5f)
  16:../DaisySP/Source/Utility/dsp.h **** #define DSY_MIN(in, mn) (in < mn ? in : mn)
  17:../DaisySP/Source/Utility/dsp.h **** #define DSY_MAX(in, mx) (in > mx ? in : mx)
  18:../DaisySP/Source/Utility/dsp.h **** #define DSY_CLAMP(in, mn, mx) (DSY_MIN(DSY_MAX(in, mn), mx))
  19:../DaisySP/Source/Utility/dsp.h **** #define DSY_COUNTOF(_arr) (sizeof(_arr) / sizeof(_arr[0]))
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 13


  20:../DaisySP/Source/Utility/dsp.h **** 
  21:../DaisySP/Source/Utility/dsp.h **** namespace daisysp
  22:../DaisySP/Source/Utility/dsp.h **** {
  23:../DaisySP/Source/Utility/dsp.h **** //Avoids division for random floats. e.g. rand() * kRandFrac
  24:../DaisySP/Source/Utility/dsp.h **** static constexpr float kRandFrac = 1.f / (float)RAND_MAX;
  25:../DaisySP/Source/Utility/dsp.h **** 
  26:../DaisySP/Source/Utility/dsp.h **** //Convert from semitones to other units. e.g. 2 ^ (kOneTwelfth * x)
  27:../DaisySP/Source/Utility/dsp.h **** static constexpr float kOneTwelfth = 1.f / 12.f;
  28:../DaisySP/Source/Utility/dsp.h **** 
  29:../DaisySP/Source/Utility/dsp.h **** /** efficient floating point min/max
  30:../DaisySP/Source/Utility/dsp.h **** c/o stephen mccaul
  31:../DaisySP/Source/Utility/dsp.h **** */
  32:../DaisySP/Source/Utility/dsp.h **** inline float fmax(float a, float b)
  33:../DaisySP/Source/Utility/dsp.h **** {
  34:../DaisySP/Source/Utility/dsp.h ****     float r;
  35:../DaisySP/Source/Utility/dsp.h **** #ifdef __arm__
  36:../DaisySP/Source/Utility/dsp.h ****     asm("vmaxnm.f32 %[d], %[n], %[m]" : [d] "=t"(r) : [n] "t"(a), [m] "t"(b) :);
  37:../DaisySP/Source/Utility/dsp.h **** #else
  38:../DaisySP/Source/Utility/dsp.h ****     r = (a > b) ? a : b;
  39:../DaisySP/Source/Utility/dsp.h **** #endif // __arm__
  40:../DaisySP/Source/Utility/dsp.h ****     return r;
  41:../DaisySP/Source/Utility/dsp.h **** }
  42:../DaisySP/Source/Utility/dsp.h **** 
  43:../DaisySP/Source/Utility/dsp.h **** inline float fmin(float a, float b)
  44:../DaisySP/Source/Utility/dsp.h **** {
  45:../DaisySP/Source/Utility/dsp.h ****     float r;
  46:../DaisySP/Source/Utility/dsp.h **** #ifdef __arm__
  47:../DaisySP/Source/Utility/dsp.h ****     asm("vminnm.f32 %[d], %[n], %[m]" : [d] "=t"(r) : [n] "t"(a), [m] "t"(b) :);
  48:../DaisySP/Source/Utility/dsp.h **** #else
  49:../DaisySP/Source/Utility/dsp.h ****     r = (a < b) ? a : b;
  50:../DaisySP/Source/Utility/dsp.h **** #endif // __arm__
  51:../DaisySP/Source/Utility/dsp.h ****     return r;
  52:../DaisySP/Source/Utility/dsp.h **** }
  53:../DaisySP/Source/Utility/dsp.h **** 
  54:../DaisySP/Source/Utility/dsp.h **** /** quick fp clamp
  55:../DaisySP/Source/Utility/dsp.h **** */
  56:../DaisySP/Source/Utility/dsp.h **** inline float fclamp(float in, float min, float max)
  57:../DaisySP/Source/Utility/dsp.h **** {
  58:../DaisySP/Source/Utility/dsp.h ****     return fmin(fmax(in, min), max);
  59:../DaisySP/Source/Utility/dsp.h **** }
  60:../DaisySP/Source/Utility/dsp.h **** 
  61:../DaisySP/Source/Utility/dsp.h **** /** From Musicdsp.org "Fast power and root estimates for 32bit floats)
  62:../DaisySP/Source/Utility/dsp.h **** Original code by Stefan Stenzel
  63:../DaisySP/Source/Utility/dsp.h **** These are approximations
  64:../DaisySP/Source/Utility/dsp.h **** */
  65:../DaisySP/Source/Utility/dsp.h **** inline float fastpower(float f, int n)
  66:../DaisySP/Source/Utility/dsp.h **** {
  67:../DaisySP/Source/Utility/dsp.h ****     long *lp, l;
  68:../DaisySP/Source/Utility/dsp.h ****     lp = (long *)(&f);
  69:../DaisySP/Source/Utility/dsp.h ****     l  = *lp;
  70:../DaisySP/Source/Utility/dsp.h ****     l -= 0x3F800000;
  71:../DaisySP/Source/Utility/dsp.h ****     l <<= (n - 1);
  72:../DaisySP/Source/Utility/dsp.h ****     l += 0x3F800000;
  73:../DaisySP/Source/Utility/dsp.h ****     *lp = l;
  74:../DaisySP/Source/Utility/dsp.h ****     return f;
  75:../DaisySP/Source/Utility/dsp.h **** }
  76:../DaisySP/Source/Utility/dsp.h **** 
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 14


  77:../DaisySP/Source/Utility/dsp.h **** inline float fastroot(float f, int n)
  78:../DaisySP/Source/Utility/dsp.h **** {
  79:../DaisySP/Source/Utility/dsp.h ****     long *lp, l;
  80:../DaisySP/Source/Utility/dsp.h ****     lp = (long *)(&f);
  81:../DaisySP/Source/Utility/dsp.h ****     l  = *lp;
  82:../DaisySP/Source/Utility/dsp.h ****     l -= 0x3F800000;
  83:../DaisySP/Source/Utility/dsp.h ****     l >>= (n = 1);
  84:../DaisySP/Source/Utility/dsp.h ****     l += 0x3F800000;
  85:../DaisySP/Source/Utility/dsp.h ****     *lp = l;
  86:../DaisySP/Source/Utility/dsp.h ****     return f;
  87:../DaisySP/Source/Utility/dsp.h **** }
  88:../DaisySP/Source/Utility/dsp.h **** 
  89:../DaisySP/Source/Utility/dsp.h **** /** From http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
  90:../DaisySP/Source/Utility/dsp.h **** No approximation, pow10f(x) gives a 90% speed increase over powf(10.f, x)
  91:../DaisySP/Source/Utility/dsp.h **** */
  92:../DaisySP/Source/Utility/dsp.h **** inline float pow10f(float f)
  93:../DaisySP/Source/Utility/dsp.h **** {
  94:../DaisySP/Source/Utility/dsp.h ****     return expf(2.302585092994046f * f);
  95:../DaisySP/Source/Utility/dsp.h **** }
  96:../DaisySP/Source/Utility/dsp.h **** 
  97:../DaisySP/Source/Utility/dsp.h **** /* Original code for fastlog2f by Dr. Paul Beckmann from the ARM community forum, adapted from the 
  98:../DaisySP/Source/Utility/dsp.h **** About 25% performance increase over std::log10f
  99:../DaisySP/Source/Utility/dsp.h **** */
 100:../DaisySP/Source/Utility/dsp.h **** inline float fastlog2f(float f)
 101:../DaisySP/Source/Utility/dsp.h **** {
 102:../DaisySP/Source/Utility/dsp.h ****     float frac;
 103:../DaisySP/Source/Utility/dsp.h ****     int   exp;
 104:../DaisySP/Source/Utility/dsp.h ****     frac = frexpf(fabsf(f), &exp);
 105:../DaisySP/Source/Utility/dsp.h ****     f    = 1.23149591368684f;
 106:../DaisySP/Source/Utility/dsp.h ****     f *= frac;
 107:../DaisySP/Source/Utility/dsp.h ****     f += -4.11852516267426f;
 108:../DaisySP/Source/Utility/dsp.h ****     f *= frac;
 109:../DaisySP/Source/Utility/dsp.h ****     f += 6.02197014179219f;
 110:../DaisySP/Source/Utility/dsp.h ****     f *= frac;
 111:../DaisySP/Source/Utility/dsp.h ****     f += -3.13396450166353f;
 112:../DaisySP/Source/Utility/dsp.h ****     f += exp;
 113:../DaisySP/Source/Utility/dsp.h ****     return (f);
 114:../DaisySP/Source/Utility/dsp.h **** }
 115:../DaisySP/Source/Utility/dsp.h **** 
 116:../DaisySP/Source/Utility/dsp.h **** inline float fastlog10f(float f)
 117:../DaisySP/Source/Utility/dsp.h **** {
 118:../DaisySP/Source/Utility/dsp.h ****     return fastlog2f(f) * 0.3010299956639812f;
 119:../DaisySP/Source/Utility/dsp.h **** }
 120:../DaisySP/Source/Utility/dsp.h **** 
 121:../DaisySP/Source/Utility/dsp.h **** /** Midi to frequency helper
 122:../DaisySP/Source/Utility/dsp.h **** */
 123:../DaisySP/Source/Utility/dsp.h **** inline float mtof(float m)
 124:../DaisySP/Source/Utility/dsp.h **** {
 125:../DaisySP/Source/Utility/dsp.h ****     return powf(2, (m - 69.0f) / 12.0f) * 440.0f;
 126:../DaisySP/Source/Utility/dsp.h **** }
 127:../DaisySP/Source/Utility/dsp.h **** 
 128:../DaisySP/Source/Utility/dsp.h **** 
 129:../DaisySP/Source/Utility/dsp.h **** /** one pole lpf
 130:../DaisySP/Source/Utility/dsp.h **** out is passed by reference, and must be retained between
 131:../DaisySP/Source/Utility/dsp.h **** calls to properly filter the signal
 132:../DaisySP/Source/Utility/dsp.h **** coeff can be calculated:
 133:../DaisySP/Source/Utility/dsp.h **** coeff = 1.0 / (time * sample_rate) ; where time is in seconds
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 15


 134:../DaisySP/Source/Utility/dsp.h **** */
 135:../DaisySP/Source/Utility/dsp.h **** inline void fonepole(float &out, float in, float coeff)
 136:../DaisySP/Source/Utility/dsp.h **** {
 137:../DaisySP/Source/Utility/dsp.h ****     out += coeff * (in - out);
 444              		.loc 2 137 9 is_stmt 0 view .LVU147
 445 0000 124B     		ldr	r3, .L41
 446              	.LBE14:
 447              	.LBE13:
 448              		.loc 1 152 17 view .LVU148
 449 0002 F6EE006A 		vmov.f32	s13, #5.0e-1
 450 0006 90ED0F7A 		vldr.32	s14, [r0, #60]
 153:taptempo.cpp  **** 
 154:taptempo.cpp  ****         //tempo_Out = tempo_;
 155:taptempo.cpp  ****         //if bigger than 5 samples change
 156:taptempo.cpp  ****         if( abs( tempo_Out - tempo_last) > 5) 
 451              		.loc 1 156 9 view .LVU149
 452 000a B1EE046A 		vmov.f32	s12, #5.0e+0
 453              	.LBB19:
 454              	.LBB15:
 455              		.loc 2 137 9 view .LVU150
 456 000e D3ED007A 		vldr.32	s15, [r3]
 457              	.LBE15:
 458              	.LBE19:
 152:taptempo.cpp  **** 
 459              		.loc 1 152 17 view .LVU151
 460 0012 416C     		ldr	r1, [r0, #68]
 461              	.LBB20:
 462              	.LBB16:
 463              		.loc 2 137 24 view .LVU152
 464 0014 37EE677A 		vsub.f32	s14, s14, s15
 465              	.LBE16:
 466              	.LBE20:
 152:taptempo.cpp  **** 
 467              		.loc 1 152 17 view .LVU153
 468 0018 DFED0D5A 		vldr.32	s11, .L41+4
 469 001c 1829     		cmp	r1, #24
 470              		.loc 1 156 16 view .LVU154
 471 001e 0D4A     		ldr	r2, .L41+8
 152:taptempo.cpp  **** 
 472              		.loc 1 152 17 view .LVU155
 473 0020 46FEA56A 		vseleq.f32	s13, s13, s11
 474              	.LVL24:
 475              	.LBB21:
 476              	.LBI13:
 135:../DaisySP/Source/Utility/dsp.h **** {
 477              		.loc 2 135 13 is_stmt 1 view .LVU156
 478              	.LBB17:
 479              		.loc 2 137 5 view .LVU157
 480              		.loc 2 137 9 is_stmt 0 view .LVU158
 481 0024 E6EE877A 		vfma.f32	s15, s13, s14
 482              	.LBE17:
 483              	.LBE21:
 484              		.loc 1 156 16 view .LVU159
 485 0028 92ED000A 		vldr.32	s0, [r2]
 486 002c 37EEC07A 		vsub.f32	s14, s15, s0
 487              	.LBB22:
 488              	.LBB18:
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 16


 489              		.loc 2 137 9 view .LVU160
 490 0030 C3ED007A 		vstr.32	s15, [r3]
 491              	.LVL25:
 492              		.loc 2 137 9 view .LVU161
 493              	.LBE18:
 494              	.LBE22:
 495              		.loc 1 156 9 is_stmt 1 view .LVU162
 496              	.LBB23:
 497              	.LBI23:
 498              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/b
   1:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
   3:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // Copyright (C) 2016-2019 Free Software Foundation, Inc.
   4:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** //
   5:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // any later version.
  10:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  11:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  16:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  20:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  25:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****  */
  29:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  30:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  33:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  35:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  37:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #endif
  42:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  44:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #undef abs
  45:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  46:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** extern "C++"
  47:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** {
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 17


  48:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** {
  50:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  52:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  54:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   inline long
  56:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
  57:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #endif
  58:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  59:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   inline long long
  61:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #endif
  63:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  64:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** // 2735. std::abs(short), std::abs(signed char) and others should return int
  68:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  69:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  70:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  71:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   abs(double __x)
  72:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   { return __builtin_fabs(__x); }
  73:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h **** 
  74:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
  75:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   abs(float __x)
 499              		.loc 3 75 3 view .LVU163
 500              	.LBB24:
  76:/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 501              		.loc 3 76 5 view .LVU164
 502              		.loc 3 76 31 is_stmt 0 view .LVU165
 503 0034 B0EEC77A 		vabs.f32	s14, s14
 504              	.LBE24:
 505              	.LBE23:
 506              		.loc 1 156 9 view .LVU166
 507 0038 B4EEC67A 		vcmpe.f32	s14, s12
 508 003c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 509 0040 03DD     		ble	.L35
 157:taptempo.cpp  ****         {
 158:taptempo.cpp  ****             tempo_last = tempo_Out; //update tempo_last
 510              		.loc 1 158 13 is_stmt 1 view .LVU167
 159:taptempo.cpp  ****             return tempo_Out;
 511              		.loc 1 159 20 is_stmt 0 view .LVU168
 512 0042 B0EE670A 		vmov.f32	s0, s15
 158:taptempo.cpp  ****             return tempo_Out;
 513              		.loc 1 158 24 view .LVU169
 514 0046 C2ED007A 		vstr.32	s15, [r2]
 515              		.loc 1 159 13 is_stmt 1 view .LVU170
 516              	.L35:
 160:taptempo.cpp  ****         }
 161:taptempo.cpp  ****         else
 162:taptempo.cpp  ****         {
 163:taptempo.cpp  ****             return tempo_last;
 164:taptempo.cpp  ****         }
 165:taptempo.cpp  **** 
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 18


 166:taptempo.cpp  ****     }  
 517              		.loc 1 166 5 is_stmt 0 view .LVU171
 518 004a 7047     		bx	lr
 519              	.L42:
 520              		.align	2
 521              	.L41:
 522 004c 00000000 		.word	.LANCHOR2
 523 0050 5839343C 		.word	1010055512
 524 0054 00000000 		.word	.LANCHOR3
 525              		.cfi_endproc
 526              	.LFE4376:
 528              		.section	.text._ZN8Taptempo10getTapFreqEv,"ax",%progbits
 529              		.align	1
 530              		.p2align 2,,3
 531              		.global	_ZN8Taptempo10getTapFreqEv
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv5-d16
 537              	_ZN8Taptempo10getTapFreqEv:
 538              	.LVL26:
 539              	.LFB4377:
 167:taptempo.cpp  ****     
 168:taptempo.cpp  ****     //outputs tap frequency in Hz
 169:taptempo.cpp  ****     float Taptempo::getTapFreq()
 170:taptempo.cpp  ****     {
 540              		.loc 1 170 5 is_stmt 1 view -0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 171:taptempo.cpp  ****         return 1.0f / (tempo_ * 0.0000208333f); //in Hz
 545              		.loc 1 171 9 view .LVU173
 546              		.loc 1 171 31 is_stmt 0 view .LVU174
 547 0000 9FED057A 		vldr.32	s14, .L44
 548              		.loc 1 171 46 view .LVU175
 549 0004 B7EE000A 		vmov.f32	s0, #1.0e+0
 550              		.loc 1 171 31 view .LVU176
 551 0008 D0ED0F7A 		vldr.32	s15, [r0, #60]
 552 000c 67EE877A 		vmul.f32	s15, s15, s14
 172:taptempo.cpp  ****     }
 553              		.loc 1 172 5 view .LVU177
 554 0010 80EE270A 		vdiv.f32	s0, s0, s15
 555 0014 7047     		bx	lr
 556              	.L45:
 557 0016 00BF     		.align	2
 558              	.L44:
 559 0018 2CC3AE37 		.word	934200108
 560              		.cfi_endproc
 561              	.LFE4377:
 563              		.section	.text._ZN8Taptempo12getTapLengthEv,"ax",%progbits
 564              		.align	1
 565              		.p2align 2,,3
 566              		.global	_ZN8Taptempo12getTapLengthEv
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 19


 570              		.fpu fpv5-d16
 572              	_ZN8Taptempo12getTapLengthEv:
 573              	.LVL27:
 574              	.LFB4378:
 173:taptempo.cpp  **** 
 174:taptempo.cpp  ****     //outputs delay length in Us;
 175:taptempo.cpp  ****     float Taptempo::getTapLength()
 176:taptempo.cpp  ****     {
 575              		.loc 1 176 5 is_stmt 1 view -0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 177:taptempo.cpp  ****         return static_cast<float>(lastTapLength_);
 580              		.loc 1 177 9 view .LVU179
 581              		.loc 1 177 49 is_stmt 0 view .LVU180
 582 0000 90ED060A 		vldr.32	s0, [r0, #24]	@ int
 178:taptempo.cpp  ****     }
 583              		.loc 1 178 5 view .LVU181
 584 0004 B8EE400A 		vcvt.f32.u32	s0, s0
 585 0008 7047     		bx	lr
 586              		.cfi_endproc
 587              	.LFE4378:
 589 000a 00BF     		.section	.text._ZN8Taptempo11setTapRatioEf,"ax",%progbits
 590              		.align	1
 591              		.p2align 2,,3
 592              		.global	_ZN8Taptempo11setTapRatioEf
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv5-d16
 598              	_ZN8Taptempo11setTapRatioEf:
 599              	.LVL28:
 600              	.LFB4379:
 179:taptempo.cpp  **** 
 180:taptempo.cpp  ****     void Taptempo::setTapRatio(float tapRatio)
 181:taptempo.cpp  ****     {
 601              		.loc 1 181 5 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 182:taptempo.cpp  ****         tapRatio_ = tapRatio;
 606              		.loc 1 182 9 view .LVU183
 607              		.loc 1 182 19 is_stmt 0 view .LVU184
 608 0000 80ED100A 		vstr.32	s0, [r0, #64]
 183:taptempo.cpp  ****     }
 609              		.loc 1 183 5 view .LVU185
 610 0004 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE4379:
 614 0006 00BF     		.section	.text._ZN8Taptempo8setTempoEf,"ax",%progbits
 615              		.align	1
 616              		.p2align 2,,3
 617              		.global	_ZN8Taptempo8setTempoEf
 618              		.syntax unified
 619              		.thumb
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 20


 620              		.thumb_func
 621              		.fpu fpv5-d16
 623              	_ZN8Taptempo8setTempoEf:
 624              	.LVL29:
 625              	.LFB4380:
 184:taptempo.cpp  ****     
 185:taptempo.cpp  ****     void Taptempo::setTempo(float tempo)
 186:taptempo.cpp  ****     {
 626              		.loc 1 186 5 is_stmt 1 view -0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 187:taptempo.cpp  ****         tempo_ = tempo; 
 631              		.loc 1 187 9 view .LVU187
 632              		.loc 1 187 16 is_stmt 0 view .LVU188
 633 0000 80ED0F0A 		vstr.32	s0, [r0, #60]
 188:taptempo.cpp  ****     }
 634              		.loc 1 188 5 view .LVU189
 635 0004 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE4380:
 639 0006 00BF     		.section	.text._ZN8Taptempo8getTempoEv,"ax",%progbits
 640              		.align	1
 641              		.p2align 2,,3
 642              		.global	_ZN8Taptempo8getTempoEv
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu fpv5-d16
 648              	_ZN8Taptempo8getTempoEv:
 649              	.LVL30:
 650              	.LFB4381:
 189:taptempo.cpp  **** 
 190:taptempo.cpp  ****     float Taptempo::getTempo()
 191:taptempo.cpp  ****     {
 651              		.loc 1 191 5 is_stmt 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 192:taptempo.cpp  ****         return tempo_;
 656              		.loc 1 192 9 view .LVU191
 193:taptempo.cpp  **** 
 194:taptempo.cpp  ****     }
 657              		.loc 1 194 5 is_stmt 0 view .LVU192
 658 0000 90ED0F0A 		vldr.32	s0, [r0, #60]
 659 0004 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE4381:
 663 0006 00BF     		.section	.text._ZN8Taptempo7setPPQNEi,"ax",%progbits
 664              		.align	1
 665              		.p2align 2,,3
 666              		.global	_ZN8Taptempo7setPPQNEi
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 21


 670              		.fpu fpv5-d16
 672              	_ZN8Taptempo7setPPQNEi:
 673              	.LVL31:
 674              	.LFB4382:
 195:taptempo.cpp  **** 
 196:taptempo.cpp  ****     void Taptempo::setPPQN(int PPQN)
 197:taptempo.cpp  ****     {
 675              		.loc 1 197 5 is_stmt 1 view -0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 198:taptempo.cpp  ****         PPQN_ = PPQN;
 680              		.loc 1 198 9 view .LVU194
 681              		.loc 1 198 15 is_stmt 0 view .LVU195
 682 0000 4164     		str	r1, [r0, #68]
 199:taptempo.cpp  ****     }...
 683              		.loc 1 199 5 view .LVU196
 684 0002 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE4382:
 688              		.section	.bss._ZZN8Taptempo14getDelayLengthEvE10tempo_last,"aw",%nobits
 689              		.align	2
 690              		.set	.LANCHOR3,. + 0
 693              	_ZZN8Taptempo14getDelayLengthEvE10tempo_last:
 694 0000 00000000 		.space	4
 695              		.section	.bss._ZZN8Taptempo14getDelayLengthEvE9tempo_Out,"aw",%nobits
 696              		.align	2
 697              		.set	.LANCHOR2,. + 0
 700              	_ZZN8Taptempo14getDelayLengthEvE9tempo_Out:
 701 0000 00000000 		.space	4
 702              		.section	.bss._ZZN8Taptempo5clockEmE14ClockTempoBuff,"aw",%nobits
 703              		.align	2
 704              		.set	.LANCHOR1,. + 0
 707              	_ZZN8Taptempo5clockEmE14ClockTempoBuff:
 708 0000 00000000 		.space	96
 708      00000000 
 708      00000000 
 708      00000000 
 708      00000000 
 709              		.section	.bss._ZZN8Taptempo5clockEmE5index,"aw",%nobits
 710              		.align	2
 711              		.set	.LANCHOR0,. + 0
 714              	_ZZN8Taptempo5clockEmE5index:
 715 0000 00000000 		.space	4
 716              		.text
 717              	.Letext0:
 718              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/machine/_de
 719              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_stdint
 720              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdint.h"
 721              		.file 7 "../libdaisy/Drivers/CMSIS/Include/core_cm7.h"
 722              		.file 8 "../libdaisy/Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 723              		.file 9 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/lib/gcc/arm-none-eabi/9.2.1/inclu
 724              		.file 10 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 725              		.file 11 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 726              		.file 12 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 727              		.file 13 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 22


 728              		.file 14 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 729              		.file 15 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 730              		.file 16 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 731              		.file 17 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 732              		.file 18 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 733              		.file 19 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 734              		.file 20 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 735              		.file 21 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 736              		.file 22 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 737              		.file 23 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 738              		.file 24 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 739              		.file 25 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 740              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 741              		.file 27 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 742              		.file 28 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 743              		.file 29 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 744              		.file 30 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 745              		.file 31 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/lock.h
 746              		.file 32 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_types
 747              		.file 33 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/reent.
 748              		.file 34 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/math.h"
 749              		.file 35 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdlib.h"
 750              		.file 36 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 751              		.file 37 "../libdaisy/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 752              		.file 38 "../libdaisy/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 753              		.file 39 "../DaisySP/Source/Control/adenv.h"
 754              		.file 40 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/lib/gcc/arm-none-eabi/9.2.1/incl
 755              		.file 41 "<built-in>"
 756              		.file 42 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/wchar.h"
 757              		.file 43 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/locale.h"
 758              		.file 44 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/ctype.h"
 759              		.file 45 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdio.h"
 760              		.file 46 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/errno.
 761              		.file 47 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/c++/9.2.1/
 762              		.file 48 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/string.h"
 763              		.file 49 "../libdaisy/src/daisy_core.h"
 764              		.file 50 "../libdaisy/src/per/tim.h"
 765              		.file 51 "../libdaisy/src/sys/system.h"
 766              		.file 52 "../libdaisy/src/util/wav_format.h"
 767              		.file 53 "../libdaisy/src/daisy_seed.h"
 768              		.file 54 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/unistd
 769              		.file 55 "../libdaisy/src/util/oled_fonts.h"
 770              		.file 56 "taptempo.h"
 771              		.file 57 "../libdaisy/src/dev/sr_595.h"
ARM GAS  /var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 taptempo.cpp
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:17     .text._ZN8Taptempo4initEmmfi:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:26     .text._ZN8Taptempo4initEmmfi:0000000000000000 _ZN8Taptempo4initEmmfi
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:96     .text._ZN8Taptempo4initEmmfi:000000000000003c $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:102    .text._ZN8Taptempo3tapEv:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:110    .text._ZN8Taptempo3tapEv:0000000000000000 _ZN8Taptempo3tapEv
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:242    .text._ZN8Taptempo3tapEv:0000000000000094 $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:247    .text._ZN8Taptempo5clockEm:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:255    .text._ZN8Taptempo5clockEm:0000000000000000 _ZN8Taptempo5clockEm
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:413    .text._ZN8Taptempo5clockEm:000000000000007c $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:422    .text._ZN8Taptempo14getDelayLengthEv:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:430    .text._ZN8Taptempo14getDelayLengthEv:0000000000000000 _ZN8Taptempo14getDelayLengthEv
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:522    .text._ZN8Taptempo14getDelayLengthEv:000000000000004c $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:529    .text._ZN8Taptempo10getTapFreqEv:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:537    .text._ZN8Taptempo10getTapFreqEv:0000000000000000 _ZN8Taptempo10getTapFreqEv
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:559    .text._ZN8Taptempo10getTapFreqEv:0000000000000018 $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:564    .text._ZN8Taptempo12getTapLengthEv:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:572    .text._ZN8Taptempo12getTapLengthEv:0000000000000000 _ZN8Taptempo12getTapLengthEv
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:590    .text._ZN8Taptempo11setTapRatioEf:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:598    .text._ZN8Taptempo11setTapRatioEf:0000000000000000 _ZN8Taptempo11setTapRatioEf
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:615    .text._ZN8Taptempo8setTempoEf:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:623    .text._ZN8Taptempo8setTempoEf:0000000000000000 _ZN8Taptempo8setTempoEf
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:640    .text._ZN8Taptempo8getTempoEv:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:648    .text._ZN8Taptempo8getTempoEv:0000000000000000 _ZN8Taptempo8getTempoEv
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:664    .text._ZN8Taptempo7setPPQNEi:0000000000000000 $t
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:672    .text._ZN8Taptempo7setPPQNEi:0000000000000000 _ZN8Taptempo7setPPQNEi
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:689    .bss._ZZN8Taptempo14getDelayLengthEvE10tempo_last:0000000000000000 $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:693    .bss._ZZN8Taptempo14getDelayLengthEvE10tempo_last:0000000000000000 _ZZN8Taptempo14getDelayLengthEvE10tempo_last
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:696    .bss._ZZN8Taptempo14getDelayLengthEvE9tempo_Out:0000000000000000 $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:700    .bss._ZZN8Taptempo14getDelayLengthEvE9tempo_Out:0000000000000000 _ZZN8Taptempo14getDelayLengthEvE9tempo_Out
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:703    .bss._ZZN8Taptempo5clockEmE14ClockTempoBuff:0000000000000000 $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:707    .bss._ZZN8Taptempo5clockEmE14ClockTempoBuff:0000000000000000 _ZZN8Taptempo5clockEmE14ClockTempoBuff
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:710    .bss._ZZN8Taptempo5clockEmE5index:0000000000000000 $d
/var/folders/0d/2ntwfkp1791d52chq7d_xwdm0000gn/T//ccRkXrDt.s:714    .bss._ZZN8Taptempo5clockEmE5index:0000000000000000 _ZZN8Taptempo5clockEmE5index

UNDEFINED SYMBOLS
_ZN5daisy6System5GetUsEv
